buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url='https://dist.creeper.host/Sponge/maven' }
        jcenter()
        mavenCentral()
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath "io.freefair.gradle:lombok-plugin:4.1.6"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
//apply plugin: "io.freefair.lombok"

version = '1.1-release1'
group = 'com.qsoftware.forgemod' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'QForgeMod'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

mixin {
    add sourceSets.main, "qforgemod.refmap.json"
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println("OS: " + System.getProperty("os.name") + " Version: " + System.getProperty("os.version"))

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=qforgemod.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=qforgemod.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the forgemod for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    jcenter()
    mavenLocal()
//    maven {
//        url "http://dl.bintray.com/silentchaos512/silent-utils"
//    }
//    // Silent Lib
//    maven {
//        url "http://dl.bintray.com/silentchaos512/silent-lib"
//    }
//    // Silent Gear
//    maven {
//        url "http://dl.bintray.com/silentchaos512/silent-gear"
//    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "http://modmaven.k-4u.nl"
    }
    maven {
        url 'http://squiddev.cc/maven/'
    }
    maven {
        url 'http://jitpack.io'
    }
    maven {
        url 'http://maven.imagej.net/content/repositories/public/'
    }
    flatDir {
        dirs 'D:\\Github\\QForgeMod\\libs'
    }
}

dependencies {
    // Jetbrains Annotations
    implementation 'org.jetbrains:annotations:19.0.0'

    // Jamepad for Gamepads including XInput.
    // https://mvnrepository.com/artifact/com.github.WilliamAHartman/Jamepad
    compile group: 'com.github.WilliamAHartman', name: 'Jamepad', version: '1.3.2'
//    compileOnly fg.deobf(name: "filters-1.3.0-1.16.3")
//    runtimeOnly fg.deobf(name: "filters-1.3.0-1.16.3")
//    compileOnly fileTree(dir: 'D:\\Github\\QForgeMod\\libs', include: ['*.jar'])
//    runtimeOnly fileTree(dir: 'D:\\Github\\QForgeMod\\libs', include: ['*.jar'])
//    compileOnly group: "com.qsoftware", name: "qmodlib", version: "1.0-beta1"
//    runtimeOnly group: "com.qsoftware", name: "qmodlib", version: "1.0-beta1"

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compile group: 'org.apache.lucene', name: 'lucene-core', version: '8.7.0'
    compile group: 'org.apache.lucene', name: 'lucene-analyzers-common', version: '8.7.0'
    compile group: 'commons-io', name: 'commons-io', version: '2.8.0'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.15'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    compile group: 'org.apache.commons', name: 'commons-text', version: '1.9'
    compile group: 'org.apache.commons', name: 'commons-configuration2', version: '2.7'
    compile group: 'org.apache.commons', name: 'commons-jexl', version: '2.1.1'
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'
    compile group: 'xml-resolver', name: 'xml-resolver', version: '1.2'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.26'

//    runtimeOnly "net.silentchaos512:silent-gear-${project.mc_version}:1.+"

    // JEI
    if (project.hasProperty("jei_version")) {
        // compile against the JEI API but do not include it at runtime
        compileOnly fg.deobf("mezz.jei:jei-${project.jei_version}")
        // at runtime, use the full JEI jar
        runtimeOnly fg.deobf("mezz.jei:jei-${project.jei_version}")
    }

//    // HWYLA
//    if (project.hasProperty("hwyla_version")) {
//        compileOnly "mcp.mobius.waila:Hwyla:${project.hwyla_version}"
//    }

    // CC Tweaked
    if (project.hasProperty("cctweaked_version")) {
        compile fg.deobf("org.squiddev:cc-tweaked-${project.cctweaked_version}")
    }

    if (project.hasProperty("refined_storage_version")) {
        compile fg.deobf("com.raoulvdberge:refinedstorage:${project.refined_storage_version}")
    }
//    implementation fileTree(dir: 'qaddons/build/libs', include: ['*.jar'])
    
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "qforgemod",
                "Specification-Vendor": "qsoftware",
                "Specification-Version": "1.1-release1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"qsoftware",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "qforgemod.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')
